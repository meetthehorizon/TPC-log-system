# Generated by Django 4.1 on 2023-11-02 09:23

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('roll_number', models.CharField(error_messages={'blank': 'Roll number cannot be empty.', 'null': 'Roll number cannot be empty.', 'unique': 'This roll number already exists.'}, max_length=8, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator(message='Roll number must be exactly 8 digits.', regex='^\\d{8}$')])),
                ('phone_number', models.CharField(error_messages={'blank': 'Phone number cannot be empty.', 'null': 'Phone number cannot be null.', 'unique': 'This phone number is already in use.'}, max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be exactly 10 digits.', regex='^\\d{10}$')])),
                ('branch', models.CharField(choices=[('APD', 'Architecture, Planning and Design'), ('CER', 'Ceramic Engineering and Technology'), ('CHE', 'Chemical Engineering'), ('CIV', 'Civil Engineering'), ('CSE', 'Computer Science and Engineering'), ('EEE', 'Electrical Engineering'), ('ECE', 'Electronics Engineering'), ('MEC', 'Mechanical Engineering'), ('MET', 'Metallurgical Engineering'), ('MIN', 'Mining Engineering'), ('PHE', 'Pharmaceutical Engineering and Technology'), ('IC', 'Chemistry'), ('MAT', 'Mathematical Sciences'), ('EP', 'Physics'), ('BCE', 'Biochemical Engineering'), ('BME', 'Biomedical Engineering'), ('SMST', 'Materials Science and Technology')], max_length=32)),
                ('degree', models.CharField(choices=[('Btech', 'B. Tech.'), ('Mtech', 'M. Tech.'), ('IDD', 'IDD')], max_length=5)),
                ('role', models.CharField(choices=[('STUDENT', 'Student'), ('TPR', 'TPR'), ('TPV', 'TPV'), ('CORE', 'Core'), ('DUTY', 'Duty'), ('VENUE', 'Venue'), ('SCHEDULING', 'Scheduling'), ('PORTAL', 'Portal')], default='STUDENT', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
